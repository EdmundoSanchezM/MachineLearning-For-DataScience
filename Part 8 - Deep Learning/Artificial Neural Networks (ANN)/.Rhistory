print("Hello world")
setwd("C:/Users/josue/Escritorio/MachineLearning/MachineLearning-For-DataScience/Part 8 - Deep Learning/Artificial Neural Networks (ANN)")
dataset = read.csv('Data.csv')
setwd("C:/Users/josue/Escritorio/MachineLearning/MachineLearning-For-DataScience/Part 8 - Deep Learning/Artificial Neural Networks (ANN)")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[,3:14]
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Codificar datos categoricos
dataset$Country = factor(dataset$Geography,
levels = c("France","Spain","Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Gender,
levels = c("Female","Male"),
labels = c(0,1))
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
set.seed(123) #Seleccionando semilla
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
#Escalado de valores
training_set[,4:12] = scale(training_set[,4:12])
#Escalado de valores
training_set[,4:12] = scale(training_set[,4:12])
#Escalado de valores
training_set[,1:12] = scale(training_set[,1:12])
#Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,4:12] = scale(testing_set[,2:3])
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Codificar datos categoricos
dataset$Country = factor(dataset$Geography,
levels = c("France","Spain","Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Gender,
levels = c("Female","Male"),
labels = c(0,1))
View(dataset)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Codificar datos categoricos
dataset$Geography = factor(dataset$Geography,
levels = c("France","Spain","Germany"),
labels = c(1,2,3))
dataset$Gender = factor(dataset$Gender,
levels = c("Female","Male"),
labels = c(0,1))
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
split = sample.split(dataset$Exited,SplitRatio = 0.8)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
#Escalado de valores
training_set[,1:12] = scale(training_set[,1:12])
View(training_set)
#Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
View(training_set)
View(testing_set)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Codificar datos categoricos
dataset$Geography = factor(dataset$Geography,
levels = c("France","Spain","Germany"),
labels = c(1,2,3))
dataset$Gender = factor(dataset$Gender,
levels = c("Female","Male"),
labels = c(0,1))
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
split = sample.split(dataset$Exited,SplitRatio = 0.8)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
#Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:12] = scale(testing_set[,1:12])
#Escalado de valores
training_set[,1:10] = scale(training_set[,1:10])
testing_set[,1:10] = scale(testing_set[,1:10])
View(testing_set)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Codificar datos categoricos
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France","Spain","Germany"),
labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female","Male"),
labels = c(0,1)))
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
split = sample.split(dataset$Exited,SplitRatio = 0.8)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
#Escalado de valores
training_set[,1:10] = scale(training_set[,1:10])
testing_set[,1:10] = scale(testing_set[,1:10])
View(training_set)
#Crear la red neuronal
install.packages("h2o")
#Crear la red neuronal
#install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
?deeplearning
#hidden c(6,6)Primera capa con 6, segunda capa con 6, etc..
classifier = h2o.deeplearning(y = "Exited",
training_frame = training_set,
activation = "Rectifier",
hidden = C(6,6),
epochs = 150,
train_samples_per_iteration = -2)
#hidden c(6,6)Primera capa con 6, segunda capa con 6, etc..
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = C(6,6),
epochs = 150,
train_samples_per_iteration = -2)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 150,
train_samples_per_iteration = -2)
View(training_set)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = testing_set[,-11])
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = as.h2o(testing_set[,-11]))
View(y_pred)
y_pred
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Predicción de los resultados con el conjunto de testing
prob_pred = predict(classifier,newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Crear la matriz de confusión
cm = table(testing_set[, 11], y_pred)
View(prob_pred)
# Predicción de los resultados con el conjunto de testing
prob_pred = h2o.predict(classifier,newdata = as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 11], y_pred)
View(y_pred)
y_pred = prob_pred> 0.5
y_pred = as.vector(y_pred)
# Crear la matriz de confusión
cm = table(testing_set[, 11], y_pred)
y_pred = prob_pred> 0.5
y_pred = as.vector(y_pred)
# Crear la matriz de confusión
cm = table(testing_set[, 11], y_pred)
cm
(1506+204)/2000
#Cerrar la sesion de H2O
h2o.shutdown()
#Cerrar la sesion de H2O
h2o.shutdown()
