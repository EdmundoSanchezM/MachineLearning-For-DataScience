# Ajustar el modelo de regresión logística con el conjunto de entrenamiento.
# Familia debe de ser binomial para regresion logistica
classifier = glm(formula = Liked ~ .,
data = training_set,
family = binomial)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el modelo de regresión logística con el conjunto de entrenamiento.
# Familia debe de ser binomial para regresion logistica
classifier = glm(formula = Liked ~ .,
data = training_set,
family = binomial)
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = binomial)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = binomial, lambda = 0.1)
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = binomial(), lambda = 0.1)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692], type = 'response')
y_pred <- ifelse(y_pred > 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = binomial(), lambda = 0.1)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692], type = 'response')
y_pred <- ifelse(y_pred > 0.5, 1, 0)
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = naiveBayes(x = training_set[,-692],
y = training_set[,692])#Se codifica como factor
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = "C-classification",
kernel = "linear",
scale = FALSE)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-692])
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = "binomial")
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = "binomial", lamda=0.5)
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = binomial, lambda = 0.5)
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set, family = binomial())
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set[,1:8], family = binomial())
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set[,600:692], family = binomial())
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = glm(Liked ~ ., data = training_set[,680:692], family = binomial())
# Ajustar la regresión logística con el conjunto de entrenamiento
classifier = suppressWarnings(glm(Liked ~ ., data = training_set, family = binomial()))
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, type = "response", newdata = test_set[-ncol(testing_set)])
y_pred = ifelse(y_pred > 0.5, 1, 0)
# Predicción de los resultados con el conjunto de testing
#Probabilidades de compra o no compra
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-692])
View(classifier)
# Predicción de los resultados con el conjunto de testing
#Probabilidades de compra o no compra
prob_pred = suppressWarnings(predict(classifier, type = "response",
newdata = testing_set[,-692]))
#Si en la probabilidad es mayor a 0.5 sera 1 (compra), caso contrarion 0 (no compra)
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar CART
library(rpart)
arbol <- rpart(Liked ~ ., data = training_set, method = "class")
# Predicción de los resultados con el conjunto de testing
#Probabilidades de compra o no compra
prob_pred <- predict(arbol, newdata = testing_set, type = "class")
#Si en la probabilidad es mayor a 0.5 sera 1 (compra), caso contrarion 0 (no compra)
y_pred = ifelse(prob_pred> 0.5, 1, 0)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar CART
library(rpart)
arbol <- rpart(Liked ~ ., data = training_set, method = "class")
# Predicción de los resultados con el conjunto de testing
prob_pred <- predict(arbol, newdata = testing_set, type = "class")
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar CART
library(C50)
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar c5.0
install.packages("C50")
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar c5.0
#install.packages("C50")
library(C50)
modelo_c50 <- C5.0(Liked ~ ., data = training_set)
# Predicción de los resultados con el conjunto de testing
y_pred <- predict(modelo_c50, newdata = testing_set)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar c5.0
install.packages("maxent")
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar c5.0
install.packages("nnet")
model <- multinom(Liked ~ ., trace = FALSE)
# Natural Language Processing
# Importar el data set
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '',
stringsAsFactors = FALSE)
# Limpieza de textos
#install.packages("tm")
#install.packages("SnowballC")
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
# Consultar el primer elemento del corpus
# as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords(kind = "en"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Crear el modelo Bag of Words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Codificar la variable de clasificación como factor
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar c5.0
install.packages("nnet")
library(nnet)
model <- multinom(Liked ~ ., trace = FALSE)
model <- multinom(Liked ~ ., data= training_set ,trace = FALSE)
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar la regresión logística con el conjunto de entrenamiento
# Implementar c5.0
#install.packages("nnet")
library(nnet)
model <- multinom(Liked ~ ., data= training_set ,trace = FALSE)
# Predicción de los resultados con el conjunto de testing
y_pred <- predict(model, newdata = testing_set)
# Crear la matriz de confusión
cm = table(testing_set[, 692], y_pred)
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[1,2]
FN <- cm[2,1]
Accuracy <- (TP+TN)/(TP+TN+FP+FN)
Precision <- TP/(TP+FP)
Recall <- TP/(TP+FN)
F1_Score <- 2*Precision*Recall/(Precision+Recall)
print(cm)
cat(paste("Accuracy:", Accuracy, "Precision:", Precision, "Recall:", Recall, "F1-Score:", F1_Score, sep=" "))
