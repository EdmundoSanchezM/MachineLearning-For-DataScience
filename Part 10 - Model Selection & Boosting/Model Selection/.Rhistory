print("Hello world")
# Grid Search
# Kernel SVM
#importando dataset
dataset = read.csv('Social_Network_Ads.csv')
setwd("C:/Users/josue/Escritorio/MachineLearning/MachineLearning-For-DataScience/Part 10 - Model Selection & Boosting/Model Selection")
# Grid Search
# Kernel SVM
#importando dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
#sample.split(Datos a separar, porcentaje para entrenar)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
#Escalado de valores
#[filas,columnas]
training_set[,1:2] = scale(training_set[,1:2])#[Todas las filas, de 2 a 3]
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
#install.packages("caret")
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x){
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = "C-classification",
kernel = "radial")
y_pred = predict(classifier, newdata = test_fold[,-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[1,2]+cm[2,1]+cm[2,2])
return(accuracy)
})
#Media
accuracy = mean(as.numeric(cv))
#Varianza
accuracy_sd = sd(as.numeric(cv))
classifier = train(form = Purchased ~ .,
data = training_set, method = 'svmRadial')
classifier
classifier$bestTune
View(dataset)
# Grid Search
# Kernel SVM
#importando dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
dataset = factor(dataset$Purchased)
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
#sample.split(Datos a separar, porcentaje para entrenar)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
dataset$Purchased = factor(dataset$Purchased)
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
#sample.split(Datos a separar, porcentaje para entrenar)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
#Separando datos de entrenamiento y testing
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
#Escalado de valores
#[filas,columnas]
training_set[,1:2] = scale(training_set[,1:2])#[Todas las filas, de 2 a 3]
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
# Aplicar algoritmo de k-fold cross validation
#install.packages("caret")
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x){
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = "C-classification",
kernel = "radial")
y_pred = predict(classifier, newdata = test_fold[,-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[1,2]+cm[2,1]+cm[2,2])
return(accuracy)
})
#Media
accuracy = mean(as.numeric(cv))
#Varianza
accuracy_sd = sd(as.numeric(cv))
# Aplicar Grid Search para encontrar los parámetros óptimos
library(caret)
classifier = train(form = Purchased ~ .,
data = training_set, method = 'svmRadial')
classifier
classifier$bestTune
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial",
sigma = 1.327355,
C = 1)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
cm
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial",
)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial",
sigma = 1.327355,
C = 1)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial",
sigma = 1.327355,
C = 1)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
cm
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier,newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
cm
