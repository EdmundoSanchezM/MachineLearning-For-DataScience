print("Hello world")
# Codificar datos categoricos
# Se especifican  los niveles y las etiquetas de los valores de la columna "Country".
# Los niveles son los valores únicos que aparecen en la columna "Country"
# y se especifican en el argumento levels como un vector de caracteres
# Las etiquetas son los valores enteros que se asignarán a cada nivel,
# y se especifican en el argumento labels como un vector de enteros
dataset$Country = factor(dataset$Country,levels = c("France","Spain","Germany",
labels = c(1,2,3)))
dataset = read.csv('Data.csv')
setwd("C:/Users/josue/Escritorio/MachineLearning/MachineLearning-For-DataScience/Part 1 - Data Preprocessing")
dataset$Age = ifelse(is.na(dataset$Age),  # if the Age value is missing
ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),  # calculate the mean of Age, excluding missing values
dataset$Age)  # else, use the original Age value
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),  # if the Age value is missing
ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),  # calculate the mean of Age, excluding missing values
dataset$Age)  # else, use the original Age value
dataset$Salary = ifelse(is.na(dataset$Salary),  # if the Salary value is missing
ave(dataset$Salary, FUN = function(x) mean(x,na.rm=TRUE)),  # calculate the mean of Salary, excluding missing values
dataset$Salary)  # else, use the original Salary value
# Codificar datos categoricos
# Se especifican  los niveles y las etiquetas de los valores de la columna "Country".
# Los niveles son los valores únicos que aparecen en la columna "Country"
# y se especifican en el argumento levels como un vector de caracteres
# Las etiquetas son los valores enteros que se asignarán a cada nivel,
# y se especifican en el argumento labels como un vector de enteros
dataset$Country = factor(dataset$Country,levels = c("France","Spain","Germany",
labels = c(1,2,3)))
View(dataset)
View(dataset)
# Codificar datos categoricos
# Se especifican  los niveles y las etiquetas de los valores de la columna "Country".
# Los niveles son los valores únicos que aparecen en la columna "Country"
# y se especifican en el argumento levels como un vector de caracteres
# Las etiquetas son los valores enteros que se asignarán a cada nivel,
# y se especifican en el argumento labels como un vector de enteros
dataset$Country = factor(dataset$Country,levels = c("France","Spain","Germany",
labels = c(1,2,3)))
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,levels = c("France","Spain","Germany",
labels = c(1,2,3)))
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France","Spain","Germany"),
labels = c(1,2,3))
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),  # if the Age value is missing
ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),  # calculate the mean of Age, excluding missing values
dataset$Age)  # else, use the original Age value
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c("No","Yes"),
labels = c(0,1))
install.packages("caTools")
library(caTools)
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
#Dividir data set entre conjunto de entranamiento y testing
library(caTools)
set.seed(123) #Seleccionando semilla
#sample.split(Datos a separar, complemento de test_size)
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
split
training_set = subset(dataset,split=TRUE)
testing_set = subset(dataset,split=FALSE)
training_set = subset(dataset,split==TRUE)
testing_set = subset(dataset,split==FALSE)
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
View(testing_set)
#Escalado de valores
#[filas,columnas]
training_set[,2:3] = scale(training_set)#[Todas las filas, de 2 a 3]
testing_set[,2:3] = scale(testing_set)
#Escalado de valores
#[filas,columnas]
training_set[,2:3] = scale(training_set[,2:3])#[Todas las filas, de 2 a 3]
testing_set[,2:3] = scale(testing_set[,2:3])
